// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct Items<R> {
    remoting: R,
}
impl<R> Items<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Items for Items<R> {
    type Args = R::Args;
    fn add_item_service(
        &mut self,
        item_id: u64,
        item: Item,
        actor_id: ActorId,
    ) -> impl Call<Output = Events, Args = R::Args> {
        RemotingAction::<_, items::io::AddItemService>::new(
            self.remoting.clone(),
            (item_id, item, actor_id),
        )
    }
    fn modify_item_service(
        &mut self,
        item_id: u64,
        new_item: Item,
    ) -> impl Call<Output = Events, Args = R::Args> {
        RemotingAction::<_, items::io::ModifyItemService>::new(
            self.remoting.clone(),
            (item_id, new_item),
        )
    }
    fn remove_item_service(&mut self, item_id: u64) -> impl Call<Output = Events, Args = R::Args> {
        RemotingAction::<_, items::io::RemoveItemService>::new(self.remoting.clone(), item_id)
    }
    fn all_items_query(&self) -> impl Query<Output = Vec<Item>, Args = R::Args> {
        RemotingAction::<_, items::io::AllItemsQuery>::new(self.remoting.clone(), ())
    }
    fn item_by_id_query(&self, item_id: u64) -> impl Query<Output = Option<Item>, Args = R::Args> {
        RemotingAction::<_, items::io::ItemByIdQuery>::new(self.remoting.clone(), item_id)
    }
    fn query(&self) -> impl Query<Output = IoState, Args = R::Args> {
        RemotingAction::<_, items::io::Query>::new(self.remoting.clone(), ())
    }
    fn total_items_query(&self) -> impl Query<Output = u128, Args = R::Args> {
        RemotingAction::<_, items::io::TotalItemsQuery>::new(self.remoting.clone(), ())
    }
}

pub mod items {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AddItemService(());
        impl AddItemService {
            #[allow(dead_code)]
            pub fn encode_call(item_id: u64, item: super::Item, actor_id: ActorId) -> Vec<u8> {
                <AddItemService as ActionIo>::encode_call(&(item_id, item, actor_id))
            }
        }
        impl ActionIo for AddItemService {
            const ROUTE: &'static [u8] = &[
                20, 73, 116, 101, 109, 115, 56, 65, 100, 100, 73, 116, 101, 109, 83, 101, 114, 118,
                105, 99, 101,
            ];
            type Params = (u64, super::Item, ActorId);
            type Reply = super::Events;
        }
        pub struct ModifyItemService(());
        impl ModifyItemService {
            #[allow(dead_code)]
            pub fn encode_call(item_id: u64, new_item: super::Item) -> Vec<u8> {
                <ModifyItemService as ActionIo>::encode_call(&(item_id, new_item))
            }
        }
        impl ActionIo for ModifyItemService {
            const ROUTE: &'static [u8] = &[
                20, 73, 116, 101, 109, 115, 68, 77, 111, 100, 105, 102, 121, 73, 116, 101, 109, 83,
                101, 114, 118, 105, 99, 101,
            ];
            type Params = (u64, super::Item);
            type Reply = super::Events;
        }
        pub struct RemoveItemService(());
        impl RemoveItemService {
            #[allow(dead_code)]
            pub fn encode_call(item_id: u64) -> Vec<u8> {
                <RemoveItemService as ActionIo>::encode_call(&item_id)
            }
        }
        impl ActionIo for RemoveItemService {
            const ROUTE: &'static [u8] = &[
                20, 73, 116, 101, 109, 115, 68, 82, 101, 109, 111, 118, 101, 73, 116, 101, 109, 83,
                101, 114, 118, 105, 99, 101,
            ];
            type Params = u64;
            type Reply = super::Events;
        }
        pub struct AllItemsQuery(());
        impl AllItemsQuery {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <AllItemsQuery as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for AllItemsQuery {
            const ROUTE: &'static [u8] = &[
                20, 73, 116, 101, 109, 115, 52, 65, 108, 108, 73, 116, 101, 109, 115, 81, 117, 101,
                114, 121,
            ];
            type Params = ();
            type Reply = Vec<super::Item>;
        }
        pub struct ItemByIdQuery(());
        impl ItemByIdQuery {
            #[allow(dead_code)]
            pub fn encode_call(item_id: u64) -> Vec<u8> {
                <ItemByIdQuery as ActionIo>::encode_call(&item_id)
            }
        }
        impl ActionIo for ItemByIdQuery {
            const ROUTE: &'static [u8] = &[
                20, 73, 116, 101, 109, 115, 52, 73, 116, 101, 109, 66, 121, 73, 100, 81, 117, 101,
                114, 121,
            ];
            type Params = u64;
            type Reply = Option<super::Item>;
        }
        pub struct Query(());
        impl Query {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Query as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for Query {
            const ROUTE: &'static [u8] = &[20, 73, 116, 101, 109, 115, 20, 81, 117, 101, 114, 121];
            type Params = ();
            type Reply = super::IoState;
        }
        pub struct TotalItemsQuery(());
        impl TotalItemsQuery {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <TotalItemsQuery as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for TotalItemsQuery {
            const ROUTE: &'static [u8] = &[
                20, 73, 116, 101, 109, 115, 60, 84, 111, 116, 97, 108, 73, 116, 101, 109, 115, 81,
                117, 101, 114, 121,
            ];
            type Params = ();
            type Reply = u128;
        }
    }
}
pub struct Signless<R> {
    remoting: R,
}
impl<R> Signless<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Signless for Signless<R> {
    type Args = R::Args;
    fn bind_keyring_data_to_user_address(
        &mut self,
        user_address: ActorId,
        keyring_data: KeyringData,
    ) -> impl Call<Output = KeyringEvent, Args = R::Args> {
        RemotingAction::<_, signless::io::BindKeyringDataToUserAddress>::new(
            self.remoting.clone(),
            (user_address, keyring_data),
        )
    }
    fn bind_keyring_data_to_user_coded_name(
        &mut self,
        user_coded_name: String,
        keyring_data: KeyringData,
    ) -> impl Call<Output = KeyringEvent, Args = R::Args> {
        RemotingAction::<_, signless::io::BindKeyringDataToUserCodedName>::new(
            self.remoting.clone(),
            (user_coded_name, keyring_data),
        )
    }
    fn keyring_account_data(
        &self,
        keyring_address: ActorId,
    ) -> impl Query<Output = KeyringQueryEvent, Args = R::Args> {
        RemotingAction::<_, signless::io::KeyringAccountData>::new(
            self.remoting.clone(),
            keyring_address,
        )
    }
    fn keyring_address_from_user_address(
        &self,
        user_address: ActorId,
    ) -> impl Query<Output = KeyringQueryEvent, Args = R::Args> {
        RemotingAction::<_, signless::io::KeyringAddressFromUserAddress>::new(
            self.remoting.clone(),
            user_address,
        )
    }
    fn keyring_address_from_user_coded_name(
        &self,
        user_coded_name: String,
    ) -> impl Query<Output = KeyringQueryEvent, Args = R::Args> {
        RemotingAction::<_, signless::io::KeyringAddressFromUserCodedName>::new(
            self.remoting.clone(),
            user_coded_name,
        )
    }
}

pub mod signless {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct BindKeyringDataToUserAddress(());
        impl BindKeyringDataToUserAddress {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId, keyring_data: super::KeyringData) -> Vec<u8> {
                <BindKeyringDataToUserAddress as ActionIo>::encode_call(&(
                    user_address,
                    keyring_data,
                ))
            }
        }
        impl ActionIo for BindKeyringDataToUserAddress {
            const ROUTE: &'static [u8] = &[
                32, 83, 105, 103, 110, 108, 101, 115, 115, 112, 66, 105, 110, 100, 75, 101, 121,
                114, 105, 110, 103, 68, 97, 116, 97, 84, 111, 85, 115, 101, 114, 65, 100, 100, 114,
                101, 115, 115,
            ];
            type Params = (ActorId, super::KeyringData);
            type Reply = super::KeyringEvent;
        }
        pub struct BindKeyringDataToUserCodedName(());
        impl BindKeyringDataToUserCodedName {
            #[allow(dead_code)]
            pub fn encode_call(
                user_coded_name: String,
                keyring_data: super::KeyringData,
            ) -> Vec<u8> {
                <BindKeyringDataToUserCodedName as ActionIo>::encode_call(&(
                    user_coded_name,
                    keyring_data,
                ))
            }
        }
        impl ActionIo for BindKeyringDataToUserCodedName {
            const ROUTE: &'static [u8] = &[
                32, 83, 105, 103, 110, 108, 101, 115, 115, 120, 66, 105, 110, 100, 75, 101, 121,
                114, 105, 110, 103, 68, 97, 116, 97, 84, 111, 85, 115, 101, 114, 67, 111, 100, 101,
                100, 78, 97, 109, 101,
            ];
            type Params = (String, super::KeyringData);
            type Reply = super::KeyringEvent;
        }
        pub struct KeyringAccountData(());
        impl KeyringAccountData {
            #[allow(dead_code)]
            pub fn encode_call(keyring_address: ActorId) -> Vec<u8> {
                <KeyringAccountData as ActionIo>::encode_call(&keyring_address)
            }
        }
        impl ActionIo for KeyringAccountData {
            const ROUTE: &'static [u8] = &[
                32, 83, 105, 103, 110, 108, 101, 115, 115, 72, 75, 101, 121, 114, 105, 110, 103,
                65, 99, 99, 111, 117, 110, 116, 68, 97, 116, 97,
            ];
            type Params = ActorId;
            type Reply = super::KeyringQueryEvent;
        }
        pub struct KeyringAddressFromUserAddress(());
        impl KeyringAddressFromUserAddress {
            #[allow(dead_code)]
            pub fn encode_call(user_address: ActorId) -> Vec<u8> {
                <KeyringAddressFromUserAddress as ActionIo>::encode_call(&user_address)
            }
        }
        impl ActionIo for KeyringAddressFromUserAddress {
            const ROUTE: &'static [u8] = &[
                32, 83, 105, 103, 110, 108, 101, 115, 115, 116, 75, 101, 121, 114, 105, 110, 103,
                65, 100, 100, 114, 101, 115, 115, 70, 114, 111, 109, 85, 115, 101, 114, 65, 100,
                100, 114, 101, 115, 115,
            ];
            type Params = ActorId;
            type Reply = super::KeyringQueryEvent;
        }
        pub struct KeyringAddressFromUserCodedName(());
        impl KeyringAddressFromUserCodedName {
            #[allow(dead_code)]
            pub fn encode_call(user_coded_name: String) -> Vec<u8> {
                <KeyringAddressFromUserCodedName as ActionIo>::encode_call(&user_coded_name)
            }
        }
        impl ActionIo for KeyringAddressFromUserCodedName {
            const ROUTE: &'static [u8] = &[
                32, 83, 105, 103, 110, 108, 101, 115, 115, 124, 75, 101, 121, 114, 105, 110, 103,
                65, 100, 100, 114, 101, 115, 115, 70, 114, 111, 109, 85, 115, 101, 114, 67, 111,
                100, 101, 100, 78, 97, 109, 101,
            ];
            type Params = String;
            type Reply = super::KeyringQueryEvent;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct Item {
    pub name: String,
    pub description: String,
    pub image: String,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum Events {
    ItemAdded(u64),
    ItemRemoved(u64),
    ItemModified(u64),
    ItemIdAlreadyExists(u64),
    ItemIdNotFound(u64),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct IoState {
    pub total_items: u128,
    pub all_items: Vec<Item>,
    pub item_registry_by_id: Vec<(u64, Item)>,
    pub actor_id_registry_by_item: Vec<(u64, ActorId)>,
    pub admins: Vec<ActorId>,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct KeyringData {
    pub address: String,
    pub encoded: String,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringEvent {
    KeyringAccountSet,
    Error(KeyringError),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringError {
    KeyringAddressAlreadyEsists,
    UserAddressAlreadyExists,
    UserCodedNameAlreadyExists,
    UserDoesNotHasKeyringAccount,
    KeyringAccountAlreadyExists,
    SessionHasInvalidCredentials,
    UserAndKeyringAddressAreTheSame,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum KeyringQueryEvent {
    LastWhoCall(ActorId),
    SignlessAccountAddress(Option<ActorId>),
    SignlessAccountData(Option<KeyringData>),
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Items {
        type Args;
        fn add_item_service(
            &mut self,
            item_id: u64,
            item: Item,
            actor_id: ActorId,
        ) -> impl Call<Output = Events, Args = Self::Args>;
        fn modify_item_service(
            &mut self,
            item_id: u64,
            new_item: Item,
        ) -> impl Call<Output = Events, Args = Self::Args>;
        fn remove_item_service(
            &mut self,
            item_id: u64,
        ) -> impl Call<Output = Events, Args = Self::Args>;
        fn all_items_query(&self) -> impl Query<Output = Vec<Item>, Args = Self::Args>;
        fn item_by_id_query(
            &self,
            item_id: u64,
        ) -> impl Query<Output = Option<Item>, Args = Self::Args>;
        fn query(&self) -> impl Query<Output = IoState, Args = Self::Args>;
        fn total_items_query(&self) -> impl Query<Output = u128, Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Signless {
        type Args;
        fn bind_keyring_data_to_user_address(
            &mut self,
            user_address: ActorId,
            keyring_data: KeyringData,
        ) -> impl Call<Output = KeyringEvent, Args = Self::Args>;
        fn bind_keyring_data_to_user_coded_name(
            &mut self,
            user_coded_name: String,
            keyring_data: KeyringData,
        ) -> impl Call<Output = KeyringEvent, Args = Self::Args>;
        fn keyring_account_data(
            &self,
            keyring_address: ActorId,
        ) -> impl Query<Output = KeyringQueryEvent, Args = Self::Args>;
        fn keyring_address_from_user_address(
            &self,
            user_address: ActorId,
        ) -> impl Query<Output = KeyringQueryEvent, Args = Self::Args>;
        fn keyring_address_from_user_coded_name(
            &self,
            user_coded_name: String,
        ) -> impl Query<Output = KeyringQueryEvent, Args = Self::Args>;
    }
}
